/**

 Javaで学ぶ「アルゴリズムとデータ構造」
 ステップバイステップでＮ−クイーン問題を最適化
 一般社団法人  共同通信社  情報技術局  鈴木 維一郎(suzuki.iichiro@kyodonews.jp)
 

 Java/C/Lua/Bash版
 https://github.com/suzukiiichiro/N-Queen 
 			

  コンパイル
  javac -cp .:commons-lang3-3.4.jar Java03_NQueen.java ;

  実行
  java  -cp .:commons-lang3-3.4.jar: -server -Xms4G -Xmx8G -XX:-HeapDumpOnOutOfMemoryError -XX:NewSize=256m -XX:MaxNewSize=256m -XX:-UseAdaptiveSizePolicy -XX:+UseConcMarkSweepGC Java03_NQueen  ;


	３．バックトラック
    各縦横列に加え斜め１個の王妃を配置する組み合わせの配置フラグ各列、対角線
上に クイーンがあるかどうかのフラグを用意し、途中で制約を満たさない事が明らか
な場 合は、それ以降のパターン生成を行わない。各列、対角線上にクイーンがあるか
どう かのフラグを用意することで高速化を図る。これまでは行方向と列方向に重複し
ない 組み合わせを列挙するものですが、王妃は斜め方向のコマをとることができるの
で、 どの斜めライン上にも王妃をひとつだけしか配置できない制限を加える事によ
り、深 さ優先探索で全ての葉を訪問せず木を降りても解がないと判明した時点で木を
引き返 すということができる。


  N-Queen の データ配列について
  =============================

  総当たり
  結局全部のケースをやってみる（完全解）

  バックトラック
  とりあえずやってみる。ダメなら戻って別の道を探る


  N-Queen: クイーンの効き筋
  =========================
  クイーンの位置から、縦、横、斜めが効き筋となります。
  　　　 ___________________
        |-*-|---|---|-*-|---|
        +-------------------+
        |---|-*-|---|-*-|---|
        +-------------------+
        |---|---|-*-|-*-|-*-|
        +-------------------+
        |-*-|-*-|-*-|-Q-|-*-|
        +-------------------+
        |---|---|-*-|-*-|-*-|
        +-------------------+


  N-Queen: 盤面上で互いのクイーンが効き筋にならないように配置
  ===========================================================

        完成図：
  　　　 ___________________
        |-Q-|---|---|---|---|
        +-------------------+
        |---|---|---|-Q-|---|
        +-------------------+
        |---|-Q-|---|---|---|
        +-------------------+
        |---|---|---|---|-Q-|
        +-------------------+
        |---|---|-Q-|---|---|
        +-------------------+


  盤面をデータ構造で表す
  ======================

     aBoard[] = { 0, 3, 1, 4, 2 };

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________
    0   |-Q-|---|---|---|---| [0]
        +-------------------+
    1   |---|---|---|-Q-|---| [3]
        +-------------------+
    2   |---|-Q-|---|---|---| [1]
        +-------------------+
    3   |---|---|---|---|-Q-| [4]
        +-------------------+
    4   |---|---|-Q-|---|---| [2]
        +-------------------+


  効き筋の表現
  ============

  　すでに効き筋：FALSE(盤面ではF）
  　配置可能    ：TRUE

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________
    0   |---|-F-|---|-F-|---|
        +-------------------+
    1   |-F-|-F-|-F-|---|---|
        +-------------------+ down[row],left[col-row+(N-1)],right[col+row]
    2   |-F-|-Q-|-F-|-F-|-F-| down[2],  left[1  -2  +(4-1)],right[1  +2  ]
        +-------------------+
    3   |-F-|-F-|-F-|---|---|
        +-------------------+
    4   |---|-F-|---|-F-|---|
        +-------------------+


  効き筋を三つの配列で表現
  ========================

  ■ 基本：aBoard[row]=col
   クイーンの位置

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________
    0   |---|---|---|---|---|
        +-------------------+
    1   |---|---|---|---|---|
        +-------------------+
    2   |---|-Q-|---|---|---| aBoard[row]=col
        +-------------------+
    3   |---|---|---|---|---|
        +-------------------+
    4   |---|---|---|---|---|
        +-------------------+


  ■配列1：down[row]

  そのrow(行)にQueenがいる場合はFALSE
                      いない場合はTRUE

  　　       column(列)
          0   1   2   3   4
  row(行)                    効き筋は down[2]
         ___________________
    0   |---|---|---|---|---|
        +-------------------+
    1   |---|---|---|---|---|
        +-------------------+ down[2]
    2   |-F-|-Q-|-F-|-F-|-F-| down[2]==F
        +-------------------+ rowが2だったらF
    3   |---|---|---|---|---|
        +-------------------+
    4   |---|---|---|---|---|
        +-------------------+
                             

  ■配列２：left[col-row+N-1]
                    left[col-row+N-1]==F
                        Qの場所：col(1)-row(2)+(4-1)=2なので
                        col-row+N-1が２のところがＦとなる 
  　　       column(列)
          0   1   2   3   4
  row(行)                    効き筋は left[col-row+(N-1)]
         __________________           left[1  -2  +(4-1)]==2
    0   |---|---|---|---|---|
        +-------------------+
    1   |-F-|---|---|---|---| col:0-row:1+N-1:3=2で2なのでＦ
        +-------------------+
    2   |---|-Q-|---|---|---|
        +-------------------+
    3   |---|---|-F-|---|---| col:2-row:3+N-1:3=2で2なのでＦ
        +-------------------+
    4   |---|---|---|-F-|---| col:3-row:4+N-1:3=2で2なのでＦ
        +-------------------+
                      left[col-row+N-1]==F


  ■配列3：right[col+row]

                      right[col+row]==F 
                          Qの場所：col(1)+row(2)=3なので
                          col+rowが3になるところがFとなる。
  　　       column(列)
          0   1   2   3   4
  row(行)                    効き筋は right[col + row]
         ___________________          right[1   + 2  ]==3
    0   |---|---|---|-F-|---| col:3+row:0で3なのでF
        +-------------------+
    1   |---|---|-F-|---|---| col:2+row:1で3なのでF
        +-------------------+
    2   |---|-Q-|---|---|---| 
        +-------------------+
    3   |-F-|---|---|---|---| col:0+row:3で3なのでF
        +-------------------+
    4   |---|---|---|---|---|
        +-------------------+


  考え方：１
  ==========
  row=0, col=0 にクイーンを配置してみます。

  aBoard[row]=col
     ↓
  aBoard[0]=0;

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________  
    0   |-Q-|---|---|---|---| 
        +-------------------+
    1   |---|---|---|---|---|
        +-------------------+
    2   |---|---|---|---|---| 
        +-------------------+
    3   |---|---|---|---|---|
        +-------------------+
    4   |---|---|---|---|---|
        +-------------------+


  考え方：２
  ==========
  効き筋を埋めます

  aBoard[row]=col
     ↓
  aBoard[0]=0;

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]★
        +-------------------+
    1   |---|-F-|---|---|---|
        +-------------------+
    2   |---|---|-F-|---|---| 
        +-------------------+
    3   |---|---|---|-F-|---|
        +-------------------+
    4   |---|---|---|---|-F-|
        +-------------------+ right[col-row+(N-1)]★


  考え方：３
  ==========
  次の候補は以下のＡ，Ｂ，Ｃとなります

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=;
  aBoard[2]=;
  aBoard[3]=;
  aBoard[4]=;

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
        +-------------------+
    1   |---|-F-|---|---|---|
        +-------------------+
    2   |---|-A-|-F-|---|---| 
        +-------------------+
    3   |---|-B-|---|-F-|---|
        +-------------------+
    4   |---|-C-|---|---|-F-|
        +-------------------+ right[col-row+(N-1)]

  考え方：４
  ==========
  Ａにおいてみます。

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=;

  　　       column(列)
          0   1   2   3   4
  row(行)
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
        +-------------------+
    1   |---|-F-|---|---|---|
        +-------------------+
    2   |---|-Q-|-F-|---|---|  
        +-------------------+
    3   |---|---|---|-F-|---|
        +-------------------+
    4   |---|---|---|---|-F-|
        +-------------------+ right[col-row+(N-1)]

  考え方：５
  ==========
  効き筋は以下の通りです。

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=;

  　　       column(列)
          0   1   2   3   4
  row(行)
                      left[col+row]
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
        +-------------------+
    1   |-F-|-F-|-F-|---|---|
        +-------------------+
    2   |-F-|-Q-|-F-|-F-|-F-| down[row]★
        +-------------------+
    3   |-F-|---|-F-|-F-|---|
        +-------------------+
    4   |---|---|---|-F-|-F-|
        +-------------------+ right[col-row+(N-1)]
                      right[col-row+(N-1)]★

  考え方：６
  ==========
  次の候補はＡとなります

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=2;

  　　       column(列)
          0   1   2   3   4
  row(行)
                     left[col+row]
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
        +-------------------+
    1   |-F-|-F-|-F-|---|---|
        +-------------------+
    2   |-F-|-Q-|-F-|-F-|-F-| down[row] 
        +-------------------+
    3   |-F-|---|-F-|-F-|---|
        +-------------------+ 
    4   |---|---|-A-|-F-|-F-| 
        +-------------------+ right[col-row+(N-1)]
                      right[col-row+(N-1)]
  考え方：７
  ==========
  効き筋は以下の通りです。

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=2;

  　　       column(列)
          0   1   2   3   4
  row(行)
                    left[col+row]
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
        +-------------------+
    1   |-F-|-F-|-F-|---|---|
        +-------------------+ left[col+row]★
    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
        +-------------------+
    3   |-F-|---|-F-|-F-|---|
        +-------------------+ 
    4   |---|---|-Q-|-F-|-F-| down[row]★
        +-------------------+ right[col-row+(N-1)]
                      right[col-row+(N-1)]


  考え方：８
  ==========
  次の候補はＡとなります

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=3;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=2;

  　　       column(列)
          0   1   2   3   4
  row(行)
                     left[col+row]
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row] 
        +-------------------+
    1   |-F-|-F-|-F-|-A-|---|
        +-------------------+ left[col+row]
    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
        +-------------------+
    3   |-F-|---|-F-|-F-|---|
        +-------------------+ 
    4   |---|---|-Q-|-F-|-F-| down[row]
        +-------------------+ right[col-row+(N-1)]
                      right[col-row+(N-1)]

  考え方：９
  ==========
  効き筋は以下の通りです。

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=3;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=2;

  　　       column(列)
          0   1   2   3   4
  row(行)
                     left[col+row]
         ___________________left[col+row]★
    0   |-Q-|-F-|-F-|-F-|-F-| down[row] 
        +-------------------+
    1   |-F-|-F-|-F-|-Q-|-F-| down[row]★
        +-------------------+ left[col+row]
    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
        +-------------------+ right[col-row+(N-1)]★
    3   |-F-|---|-F-|-F-|---|
        +-------------------+ 
    4   |---|---|-Q-|-F-|-F-| down[row]
        +-------------------+ right[col-row+(N-1)]
                      right[col-row+(N-1)]

  考え方：１０
  ==========
  今回は、うまくいっていますが、
  次の候補がなければ、キャンセルして、
  前のコマを次の候補にコマを移動し、
  処理を継続します。

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=3;
  aBoard[2]=1;
  aBoard[3]=;
  aBoard[4]=2;

  　　       column(列)
          0   1   2   3   4
  row(行)
                     left[col+row]
         ___________________left[col+row]★
    0   |-Q-|-F-|-F-|-F-|-F-| down[row] 
        +-------------------+
    1   |-F-|-F-|-F-|-Q-|-F-| down[row]★
        +-------------------+ left[col+row]
    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
        +-------------------+ right[col-row+(N-1)]★
    3   |-F-|---|-F-|-F-|---|
        +-------------------+ 
    4   |---|---|-Q-|-F-|-F-| down[row]
        +-------------------+ right[col-row+(N-1)]
                      right[col-row+(N-1)]


  考え方：１１
  ==========
  最後のクイーンをおきます

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=3;
  aBoard[2]=1;
  aBoard[3]=4;
  aBoard[4]=2;

  　　       column(列)
          0   1   2   3   4
  row(行)
                      left[col+row]
                          left[col+row]
         ___________________  
    0   |-Q-|-F-|-F-|-F-|-F-| down[row]  
        +-------------------+
    1   |-F-|-F-|-F-|-Q-|-F-| down[row]
        +-------------------+ left[col+row]
    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
        +-------------------+ right[col-row+(N-1)]
    3   |-F-|---|-F-|-F-|-Q-| down[row]★
        +-------------------+ 
    4   |---|---|-Q-|-F-|-F-| down[row]
        +-------------------+
                          right[col-row+(N-1)]
                       right[col-row+(N-1)]


  考え方：１２
  ==========
  rowの脇にcolの位置を示します。

  aBoard[row]=col
     ↓
  aBoard[0]=0;
  aBoard[1]=3;
  aBoard[2]=1;
  aBoard[3]=4;
  aBoard[4]=2;

  　　       column(列)
           0   1   2   3   4
  row(行)
          ___________________  
    0[0] |-Q-|-F-|-F-|-F-|-F-|  
         +-------------------+
    1[3] |-F-|-F-|-F-|-Q-|-F-|
         +-------------------+
    2[1] |-F-|-Q-|-F-|-F-|-F-| 
         +-------------------+
    3[4] |-F-|---|-F-|-F-|-Q-|
         +-------------------+ 配列構造で 
    4[2] |---|---|-Q-|-F-|-F-|  aBoard[]={0,3,1,4,2} 
         +-------------------+



   実行結果 
   N:            Total       Unique     hh:mm:ss.SSS
   4:                2            0     00:00:00.000
   5:               10            0     00:00:00.000
   6:                4            0     00:00:00.001
   7:               40            0     00:00:00.000
   8:               92            0     00:00:00.001
   9:              352            0     00:00:00.002
  10:              724            0     00:00:00.003
  11:             2680            0     00:00:00.014
  12:            14200            0     00:00:00.064
  13:            73712            0     00:00:00.381
  14:           365596            0     00:00:02.229
  15:          2279184            0     00:00:14.249
  16:         14772512            0     00:01:38.375
  17:         95815104            0     00:12:18.698
*/

import org.apache.commons.lang3.time.DurationFormatUtils;

class Java03_NQueen{
  //グローバル変数
	private int				SIZE;
	private long			TOTAL;
	private int[]			board;
	private boolean[]	fA,fB,fC;
	// コンストラクタ
	public Java03_NQueen(){
		int max=17;
		System.out.println(" N:            Total       Unique     hh:mm:ss.SSS");
		for(SIZE=4;SIZE<max;SIZE++){
			TOTAL=0;
			board=new int[SIZE];
			fA=new boolean[SIZE];
			fB=new boolean[2*SIZE-1];
			fC=new boolean[2*SIZE-1];
			for(int i=0;i<SIZE;i++){
				board[i]=i;
			}
			long start=System.currentTimeMillis();
			nQueens(0); // ０列目に王妃を配置してスタート
			long end=System.currentTimeMillis();
			String TIME=DurationFormatUtils.formatPeriod(start,end,"HH:mm:ss.SSS");
			System.out.printf("%2d:%17d%13d%17s%n",SIZE,TOTAL,0,TIME);
		}
	}
	// 再帰関数
	private void nQueens(int row){
		if(row==SIZE){
			TOTAL++;
		}else{
			for(int i=0;i<SIZE;i++){
				board[row]=i; // 各列にひとつのクイーンを配置する
				if(fA[i]==false
          &&fC[row+i]==false
          &&fB[row-i+(SIZE-1)]==false){
					fA[i]=true;
          fB[row-board[row]+SIZE-1]=true;
          fC[row+board[row]]=true;
					nQueens(row+1);
					fA[i]=false;
          fB[row-board[row]+SIZE-1]=false;
          fC[row+board[row]]=false;
				}
			}
		}
	}
  //メインメソッド
	public static void main(String[] args){
		new Java03_NQueen();   //実行はコメントを外して $ ./MAIN.SH を実行
	}
}

