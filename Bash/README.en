日本語
#
# "Algorithms and data structures" learned with BASH
# Information Technology Bureau, Kyodo News Agency, Inc. Iichiro Suzuki (suzuki.iichiro@kyodonews.jp)
#
# Bash / Lua / Java / C / GPU version
# https://github.com/suzukiiichiro/N-Queen
#
# Optimize N-Queen problem step by step N = 12

# 1. Brute force (forced search) N-Queen 1 ()
# 2. Placement flag (constraint test acceleration) N-Queen 2 ()
# 3. Back track (BT) N-Queen 3 () 0: 07_30
# 4. BT + symmetry cancellation method N-Queen 4 () 0:06:48
# 5. BT + symmetry cancellation + pruning N-Queen 5 () 0:03:36
# 6. BT + bitmap (Bit) N-Queen 6 (0: 01: 52)
# 7. BT + Bit + symmetry cancellation method N-Queen 7 () 0:05:47
# 8. BT + Bit + Symmetry + Pruning N-Queen 8 () 0:05:54
# 9. BT + Bit + Symmetry cancellation Bit + Sorting according to queen position (BOUND 1) N-Queen 9 () 0: 03: 19
# 10. BT + Bit + Symmetry cancellation Bit + Sorting by position of queen (BOUND1 + BOUND2) N-Queen 10 () 0: 03: 50
# 11. BT + Bit + symmetry cancellation Bit + (BOUND1 + BOUND2) + pruning N-Queen 11 () 0: 02:00
# 12. BT + Bit + symmetry cancellation Bit + (BOUND1 + BOUND2) + pruning + optimization N-Queen 12 () 0:00: 25
#
#
################################################
# N-Queen
################################################
#
##
# Recursion N queen problem
#
# https://en.wikipedia.org/wiki/Eight Queen
#
# What is the N-Queens problem
# The N queen problem is, "8 columns × 8 rows of chess boards have 8 queens, each
# How to arrange the queen (N) of the 8 queen problem called
# The problem of being able to find solutions up to N.
# Queen refers to the queen used in chess, in the chessboard, vertically and horizontally,
# It is a piece that can go as far as diagonally, so let's put together "flyers and horns" in Japanese Shogi
# The movement is 8-Queens on a typical chess board consisting of 8 columns x 8 lines
# The solution of the problem is that the total number of solutions is 92. Because it is a relatively simple problem,
# Often taken up as a lesson.
# 8-Queens problem, even if "forced search" by human power or program
# You can find a solution, but as N increases, the solution explodes at once, and in practical time
# Can not be solved.
# If all solutions are currently known, do not run 264 CPU x 20 days at the University of Electro-Communications in 2004
# Set aside n = 24 and become the best in the world, then at Nizza University in 2005 n = 25, 2016 in
# We have succeeded in finding a solution of n = 27 at SUD.
#

# ---------------------------------------------------- -------------------------------------
## 1. Brute force Force search
#
# Systematically count all possible solution candidates, and each solution candidate
# How to check
# (*) Recursively generate an enumeration combination combining the arrangement that places one royal note on each line
# # Not an 8 king problem solved
# ---------------------------------------------------- -------------------------------------
#
#  Execution result
#:
#:
# 16777209: 7 7 7 7 7 7 0
# 16777210: 7 7 7 7 7 7 1
# 16777211: 7 7 7 7 7 7 7 2
# 16777212: 7 7 7 7 7 7 3 3
# 16777213: 7 7 7 7 7 7 7 4
# 16777214: 7 7 7 7 7 7 7 5
# 16777215: 7 7 7 7 7 7 6
# 16777216: 7 7 7 7 7 7 7
#
# ---------------------------------------------------- -------------------------------------
##
# 2. Placement flag (constraint test acceleration)
# Do not check after completion of pattern generation, but satisfy constraints along the way
# If there is an obvious thing, do not perform pattern generation after that.
# "Go forward as much as you can, but no more than that."
# If you know something, go back and try again. ”
# (*) Even if you execute the branch branch scan recursively for the combination of arranging one royal order in each matrix,
# We only list the combinations, not to solve the 8 queen problem.
#
# ---------------------------------------------------- -------------------------------------
#
# Execution result
#:
#:
# 40313: 7 6 5 4 2 3 0 1
# 40314: 7 6 5 4 2 3 1 0
# 40315: 7 6 5 4 3 0 1 2
# 40316: 7 6 5 4 3 0 2 1
# 40317: 7 6 5 4 3 1 0 2
# 40318: 7 6 5 4 3 1 2 0
# 40319: 7 6 5 4 3 2 0 1
# 40320: 7 6 5 4 3 2 1 0
#
# ---------------------------------------------------- -------------------------------------
##
# 3. Back track
#
# Prepare a flag indicating whether there is a queen on each column, diagonally, and satisfy constraints along the way
# If there is no obvious thing, do not do pattern generation after that.
# Speed ​​up by preparing flags for whether each row has a queen on the diagonal.
# So far, it is a list of combinations that do not overlap in the row and column directions, but
Because # can take a piece in the diagonal direction, there is one queen on any diagonal line
# Do not visit all leaves in a depth-first search by adding restrictions that can only be placed on trees
It is possible to turn back the tree when it turns out that there is no solution after getting off the #.
#
# ---------------------------------------------------- -------------------------------------
#
# Execution result
#
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 2 0 0:00:00
# 5: 10 0 0:00:00
# 6: 4 0 0:00:00
# 7: 40 0 ​​0:00:00
# 8: 92 0 0:00: 01
# 9: 352 0 0:00: 03
# 10: 724 0 0:00: 17
# 11: 2680 0 0: 01: 23
# 12: 14200 0 0:07:30
#
# ---------------------------------------------------- -------------------------------------
# 4. Back track + target cancellation method
#
# One solution is 90 degrees, 180 degrees, 270 degrees rotation of the board and the sum of their mirror images
# There are 8 symmetric solutions. A method of removing an opposite solution and finding a solution from a unique solution.
#
# ■ Judgment method of unique solution
# One solution obtained by full search is essentially changed by rotation, inversion, etc.
If there is something that is isomorphic to another solution by the transformation without #, it is not considered another solution
The solution obtained by counting # solutions is called "unique solution". In other words, a unique solution is
# Group all solutions that are isomorphic by transformation by rotation, inversion, etc.
It means #.
#
# Therefore, a unique solution is focused on its “number only”, and this solution is a unique solution.
There is no definite way to judge that the solution of # is not a unique solution. Is it a unique solution?
# Judgment should be freely defined by each individual for the purpose of counting the number of unique solutions.
It will be #. Of course, the number of unique solutions themselves is
# I do not know.
#
# Well, since the N-Queen problem is formed by a square board, a conversion putter by rotation and inversion
There are 8 ways in all. So simply "total number of answers = unique number of answers x 8"
# I don `t go. The number of elements in one group is not always eight. Of N = 5
# In the example below, there are two elements and eight elements.
#
#
# The total solution of N = 5 is 10, and the unique solution is 2.
#
# Group 1: One unique solution
#---Q--Q---
# Q--------Q
#--Q----Q--
#----Q Q----
#-Q------Q-
#
# Group 2: Unique solution 2
#----Q Q------Q----Q----Q--Q---Q-------Q
#--Q----Q--Q-------Q-Q-----Q---Q--Q--Q---
# Q--------Q---Q--Q------Q Q-----Q------Q-
#---Q--Q----Q-----Q---Q----Q-----Q Q----
#-Q------Q-----Q Q----Q-------Q--Q----Q--
#
#
# Then we define it to determine the unique solution, but define it as follows
# I will do that. Find out where the queen of each row is from the right, down from the top row
List the lines in # in order. And it will be the minimum value when it is viewed as an N-digit number
Let's count # as a unique solution. In addition, the number of N digits is referred to as "unique judgment value" thereafter.
I will call it #.
#
#----Q 0
#--Q--2
# Q----4 ---> 0 2 4 1 3 (unique judgment value)
#---Q-1
#-Q---3
#
#
# Determine whether one solution (original) obtained by search is a unique solution
In order to "#", 8 conversions are tried, among which the original unique judgment value is minimum
Find out the #. However, speaking from the conclusion, it can not be a unique solution
# By incorporating a pruning that truncates while searching for clear patterns, three ways of
# The unique solution can be determined just by trying the conversion.
#
#
# ■ Find the number of unique solutions
# Focus on the position of the queen in the top row first. If the position is in the left half area, you
# It can not be a Neek solution. Because the unique size of the pattern obtained by flipping left and right
# The fixed value is definitely smaller. Also, if N was odd and in the middle
# It will be. This too can not be a unique solution. Because if it was in the middle,
# In order for this to be a unique solution, the position of the queen on at least the other three sides is also
It has to be in the center, and it is impossible because it corresponds to each other's effective lines.
#
# TOTAL = (COUNT8 8) + (COUNT4 4) + (COUNT2 2);
# (1) If it is rotated by 90 degrees and becomes the same shape as the original, then another 90 degrees
Even if it is rotated by 90 degrees (or rotated by
# Isomorphic to Genal.
#
# COUNT2 2
#
# (2) If the image is rotated 90 degrees and it is different from the original, the original must be rotated by 270 degrees
It is different from However, when rotated 180 degrees, it may be the same as the original
# Get.
#
# COUNT4 4
#
# (3) The number of elements of the group to which the unique solution corresponding to (1) belongs is a pattern in which the left and right are inverted
# There are only 2 in addition. The number of elements of the group to which the unique solution corresponding to (2) belongs is
# If you rotate by 180 degrees and become the same type, 4 pieces (horizontal flip x vertical rotation), and even by rotating 180 degrees
# There are 8 if different from the original. (Horizontal flip × vertical rotation × vertical flip)
#
# COUNT8 8
#
# From the above, find out which kind of unique solution each one corresponds to
The total solution number can be derived by calculation. Pruning will shorten the search time
There is no need to remove it.
#
# UNIQUE COUNT2 + COUNT4 + COUNT8
# TOTAL (COUNT2 2) + (COUNT 4 4) + (COUNT 8 8)
#
# If you realize these, the execution speed will be slower than the previous NQueen 3 ().
# Because the process to invert the symmetry, inversion, and oblique axis is added.
# However, by performing this process, processing speed is further skipped in NQueen 5
# Speeds up dramatically. For that purpose, this algorithm implementation is necessary.
#
# Execution result
# N-Queen 4: Backtrack + Unsymmetrical
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 2 1 0:00:00
# 5: 10 2 0:00: 01
# 6: 4 1 0:00:00
# 7: 40 6 0:00:00
# 8: 92 12 0:00: 01
# 9: 352 46 0:00: 05
# 10: 724 92 0:00: 16
# 11: 2680 341 0: 01: 14
# 12: 14200 1787 0: 06: 48
#
# ---------------------------------------------------- -------------------------------------
# 5. Backtrack + de-symmetry + pruning and optimization
#
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 2 1 0:00:00
# 5: 10 2 0:00:00
# 6: 4 1 0:00:00
# 7: 40 6 0:00:00
# 8: 92 12 0:00: 01
# 9: 352 46 0:00: 03
# 10: 724 92 0:00: 08
# 11: 2680 341 0:00: 45
# 12: 14200 1787 0: 03: 36
#
# ---------------------------------------------------- -------------------------------------
##
# 6. Backtrack + Bitmap
#
# Pack and process acceleration states into bitmaps using bitwise operations
# 20 to 30 times faster than a simple backtrack
#
# Bitmaps can shift data at high speed by shifting.
In the # flag array, it takes O (N) time to move data, but in the case of bitmap O (1)
Instead of preparing 2 * N-1 elements in the diagonal direction as with the # flag array, fill with N bits.
# Minutes.
#
# Put assignable bit string into flags, and take out bits in order with -flags & flags.
# 20-30 times faster than back track.
#
# ======================
# Thinking 1
# ======================
#
# N × N chess board is represented by N bit fields, and one row state is
# Corresponds to one bit field. (Turn on the bit where the queen is placed
#)
# And backtracking is “downward” from the 0th bitfield
# Turn on one bit position of any one and proceed.
#
#
#-----Q--00000100 0th bit field
#---Q----00010000 1st bit field
#------Q-0000010 Second bit field
#Q-------10000000 third bit field
#-------Q 00000001 4th bit field
#-Q------01000000 fifth bit field
#----Q---00001000 Sixth bit field
#--Q-----00100000 7th bit field
#
#
# ======================
# Thinking 2
# ======================
#
# Next, prepare three more bit fields to check the effect.
#
# 1. The lower left muscle goes to the lower left: left
# 2. What works right below: down
# 3. Right bottom right and going forward: right
#
Next, think about the diagonal dominant.
# In the above figure,
# The dominant muscle on the right of the first column is the third (0x08)
# The top right corner of the second column is the second (0x04).
# This value is obtained by "shifting right" the position 0x10 of the 0th row queen by 1 bit
# can do.
# Also, for the top left, the fifth column (0x20) in the first column and the sixth (0x40) in the second column
Since it becomes #, this can be obtained by "shifting left" one bit at a time.
#
In other words, by expressing the dominant of the right shift with right and the dominant of the left shift with left,
The effect of # can be obtained by shifting right and left by one bit.
#
# * ---------------
#.
# |... -3.. 0x02-|
# |.. -2... 0x04 | (1 bit right shift right)
# |. -1... 0x08-|
# | Q... 0x 10 (the position of Q is 4 down)
# |. +1.... 0x20-|
# |.. +2... 0x40 | (1 bit left shift left)
# |... +3.. 0x80-|
# * ---------------
# Diagram: Check for angled dominant muscle
#
# When advancing the search from the nth bitfield to the n + 1th bitfield,
Each row of OR operation of 3 bit field of # and nth bit field (bit)
# is. left is shifted one to the left, down is unchanged, right is shifted one to the right
# Pass it to the n + 1st bit field search.
#
# left: (left | bit) << 1
# right: (right | bit) >> 1
# down: down | bit
#
#
# ======================
# Thinking 3
# ======================
#
# These three bit fields were ORed in the search for the n + 1st bit field
# Create a bit field and place it in a position where it is ON, as it is a valid muscle.
# It will be the impossible position. Next, the bit obtained by ORing the three bit fields
# Invert bit field. In other words, "Bit
Convert to # field. And assuming that this arrangeable bit field is called bitmap,
# Try the next operation.
#
# bit = -bitmap & bitmap; // Get the rightmost bit
#
# How can a negative value be used in a computer binary system to understand the meaning of this formula
You need to know what is expressed in #. Try to represent negative values ​​in binary notation
It looks like this with #.
#
# 00000011 3
# 00000010 2
# 00000001 1
# 00000000 0
# 11111111 -1
# 11111110 -2
# 11111101 -3
#
# When making positive value n into negative value -n, it is inverted after adding n to +1. And
# For example, when n and -n are ANDed with n = 22, the result is as follows. when n is expressed in binary system
# The result is that only the lowest ON bit is extracted. Extremely easy operation
It is important to realize 1 bit extraction by #.
#
# 00010110 22
# AND 11101010 -22
# ---------------------
# 00000010
#
# Well, if you write a while statement like the one below, this loop is the number of ON bits in bitmap
It will loop # times. There is no waste at all for every pattern that can be placed
# Will be generated.
#
# while (bitmap) {
# bit = -bitmap & bitmap;
# bitmap ^ = bit;
# // The placeable pattern is generated one by one here (bit)
#}
#
#	Execution result
# N-Queen 6: Backtrack + Bitmap
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 2 0 0:00:00
# 5: 10 0 0:00:00
# 6: 4 0 0:00:00
# 7: 40 0 ​​0:00:00
# 8: 92 0 0:00:00
# 9: 352 0 0:00: 01
# 10: 724 0 0:00: 05
# 11: 2680 0 0:00: 21
# 12: 14200 0 0: 01: 52
#
#
# ---------------------------------------------------- -------------------------------------
##
# 7. Backtrack + bitmap + symmetry cancellation method
#
# One solution is 90 degrees, 180 degrees, 270 degrees rotation of the board and the sum of their mirror images
# There are 8 symmetric solutions. A method of removing an opposite solution and finding a solution from a unique solution.
#
# ■ Judgment method of unique solution
# One solution obtained by full search is essentially changed by rotation, inversion, etc.
If there is something that is isomorphic to another solution by the transformation without #, it is not considered another solution
The solution obtained by counting # solutions is called "unique solution". In other words, a unique solution is
# Group all solutions that are isomorphic by transformation by rotation, inversion, etc.
It means #.
#
# Therefore, a unique solution is focused on its “number only”, and this solution is a unique solution.
There is no definite way to judge that the solution of # is not a unique solution. Is it a unique solution?
# Judgment should be freely defined by each individual for the purpose of counting the number of unique solutions.
It will be #. Of course, the number of unique solutions themselves is
# I do not know.
#
# Well, since the N-Queen problem is formed by a square board, a conversion putter by rotation and inversion
There are 8 ways in all. So simply "total number of answers = unique number of answers x 8"
# I don `t go. The number of elements in one group is not always eight. Of N = 5
# In the example below, there are two elements and eight elements.
#
#
# The total solution of N = 5 is 10, and the unique solution is 2.
#
# Group 1: One unique solution
#---Q--Q---
# Q--------Q
#--Q----Q--
#----Q Q----
#-Q------Q-
#
# Group 2: Unique solution 2
#----Q Q------Q----Q----Q--Q---Q-------Q
#--Q----Q--Q-------Q-Q-----Q---Q--Q--Q---
# Q--------Q---Q--Q------Q Q-----Q------Q-
#---Q--Q----Q-----Q---Q----Q-----Q Q----
#-Q------Q-----Q Q----Q-------Q--Q----Q--
#
#
# Then we define it to determine the unique solution, but define it as follows
# I will do that. Find out where the queen of each row is from the right, down from the top row
List the lines in # in order. And it will be the minimum value when it is viewed as an N-digit number
Let's count # as a unique solution. In addition, the number of N digits is referred to as "unique judgment value" thereafter.
I will call it #.
#
#----Q 0
#--Q--2
# Q----4 ---> 0 2 4 1 3 (unique judgment value)
#---Q-1
#-Q---3
#
#
# Determine whether one solution (original) obtained by search is a unique solution
In order to "#", 8 conversions are tried, among which the original unique judgment value is minimum
Find out the #. However, speaking from the conclusion, it can not be a unique solution
# By incorporating a pruning that truncates while searching for clear patterns, three ways of
# The unique solution can be determined just by trying the conversion.
#
#
# ■ Find the number of unique solutions
# Focus on the position of the queen in the top row first. If the position is in the left half area, you
# It can not be a Neek solution. Because the unique size of the pattern obtained by flipping left and right
# The fixed value is definitely smaller. Also, if N was odd and in the middle
# It will be. This too can not be a unique solution. Because if it was in the middle,
# In order for this to be a unique solution, the position of the queen on at least the other three sides is also
It has to be in the center, and it is impossible because it corresponds to each other's effective lines.
#
# ■ Development from unique solution to all solutions
The previous consideration was to find the number of unique solutions. To find the total number of solutions
# We need to pruning to find a unique solution and do a full search. Therefore
# It will cost you search time. Therefore, from the number of unique solutions,
# You can think of an attempt to lead it. This is a pattern search by left-right inversion
It is an extension of the idea to omit the # and finally double the result. And that
# To realize this, "How many elements of a group a certain unique solution belongs to?"
# It is necessary to consider.
#
# First, consider the unique solution where the queen is in the upper right corner. The pattern inverted on the oblique axis
# It is impossible to become isomorphic to the original (x 2), and the other three queens in the upper right corner
# The number of elements of the group to which this unique solution belongs is required because it can be mapped to a corner (× 4)
# There will be 8 pieces (= 2 × 4).
#
# Second, if the queen is in the upper right corner it gets a bit more complicated, but for simplicity
Check the following for #.
#
# TOTAL = (COUNT 8 * 8) + (COUNT 4 * 4) + (COUNT 2 * 2);
# (1) If it is rotated by 90 degrees and becomes the same shape as the original, then another 90 degrees
Even if it is rotated by 90 degrees (or rotated by
# Isomorphic to Genal.
#
# COUNT2 * 2
#
# (2) If the image is rotated 90 degrees and it is different from the original, the original must be rotated by 270 degrees
It is different from However, when rotated 180 degrees, it may be the same as the original
# Get.
#
# COUNT 4 * 4
#
# (3) The number of elements of the group to which the unique solution corresponding to (1) belongs is a pattern in which the left and right are inverted
# There are only 2 in addition. The number of elements of the group to which the unique solution corresponding to (2) belongs is
# If you rotate by 180 degrees and become the same type, 4 pieces (horizontal flip x vertical rotation), and even by rotating 180 degrees
# There are 8 if different from the original. (Horizontal flip × vertical rotation × vertical flip)
#
# COUNT8 * 8
#
# From the above, find out which kind of unique solution each one corresponds to
The total solution number can be derived by calculation. Pruning will shorten the search time
There is no need to remove it.
#
# UNIQUE COUNT2 + COUNT4 + COUNT8
# TOTAL (COUNT 2 * 2) + (COUNT 4 * 4) + (COUNT 8 * 8)
#
# If you realize these, the execution speed will be slower than the previous NQueen 3 ().
# Because the process to invert the symmetry, inversion, and oblique axis is added.
# However, the processing speed will be dramatically improved by performing this process. For that purpose, this algorithm implementation is necessary.
#
#
# Execution result
#
# <> 7. BT + Bit + symmetry cancellation method N-Queen 7 ()
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 2 1 0:00:00
# 5: 10 2 0:00:00
# 6: 4 1 0:00:00
# 7: 40 6 0:00:00
# 8: 92 12 0:00: 02
# 9: 352 46 0:00: 05
# 10: 724 92 0:00: 14
# 11: 2680 341 0: 01: 01
# 12: 14200 1787 0: 05: 47
#
#
#
# ---------------------------------------------------- -------------------------------------
##
# 8. Backtrack + Bitmap + Symmetry Cancellation + Pruning and Optimization
#
#
# Execution result
#
# <> 8. BT + Bit + Symmetry + Pruning N-Queen 8 ()
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 2 1 0:00:00
# 5: 10 2 0:00:00
# 6: 4 1 0:00:00
# 7: 40 6 0:00: 01
# 8: 92 12 0:00: 01
# 9: 352 46 0:00: 06
# 10: 724 92 0:00: 15
# 11: 2680 341 0: 01: 04
# 12: 14200 1787 0: 05: 54
#
#
# ---------------------------------------------------- -------------------------------------
##
# 9. Backtrack + Bitmap + Unsymmetry + Pruning and Optimization + Symmetry Unpaired Bitmap + Sort by Queen Position (BOUND 1)
#
# The position of the queen in the top row is limited to the right area except the center. (Where N 2 2)
#
# Now consider the case where there is a queen at the far right (upper right corner). The other three
Because you can not put a queen in the corner of # (because it works well), it is a unique solution
The only way to determine # is by comparing it with the pattern inverted on the oblique axis passing from the upper right corner to the lower left corner.
# In short,
#
# [Where the second queen from the top is from the right]
# [Where is the position of the second row of queen from the top from the top]
#
#
It can be determined just by comparing #. This is because these two values ​​will never be the same.
#
# 3 0
# ↓
#----Q ← 0
#-Q---← 3
#-----The second queen from the top is the fourth from the right.
#---Q-The second row from the right is the fourth queen position from the top.
#-----However, this is impossible because they are mutually effective.
#
# After all, it is better to put a pruning that prohibits the placement to X in the following figure during recursive search.
# All guaranteed solutions are guaranteed to be unique.
#
#----X Q
#-Q--X-
#----X-
#----X-
#------
#------

# Now consider the case where there is a queen other than the right end. Original is a unique solution
In order to #, the placement to X in the figure below is prohibited first. Therefore, put that pruning first
#
#
# X X---Q X X
# X------X
#---------
#---------
#---------
#---------
# X------X
# X X----X X
#
# Next, when you follow the queen's dominant source, it is possible that the original is not a unique solution after all
# There is a sex only if there is a queen somewhere in the positions A, B and C in the figure below. Follow
# It is good to examine only three conversion patterns of 90 ° rotation, 180 ° rotation and 270 ° rotation
It will be #.
#
# X X x x x Q X X
# X---x x x X
# C--x-x-x
#--x--x--
#-x---x--
# x----x-A
# X----x-X
# X X B--x X X
#
# Execution result
#
# <> 9. Sort by BT + Bit + Symmetry Canceled Bit + Queen Position (BOUND 1) N-Queen 9 ()
# N: Total Unique hh: mm: ss
# 2: 0 0 0:00:00
# 3: 0 0 0:00:00
# 4: 0 0 0:00:00
# 5: 10 2 0:00:00
# 6: 4 1 0:00:00
# 7: 40 6 0:00:00
# 8: 92 12 0:00: 01
# 9: 352 46 0:00: 03
# 10: 724 92 0:00: 09
# 11: 2680 341 0:00: 38
# 12: 14200 1787 0: 03: 19
#
# ---------------------------------------------------- -------------------------------------
##
# 10. Backtrack + Bitmap + Unsymmetry + Pruning and Optimization + Symmetry Unpaired Bitmap + Sort by Queen Position (BOUND1 + BOUND2)
#
#
# Execution result
# <> 10. BT＋Bit＋対称解除Bit＋クイーンの位置による振り分け (BOUND1+BOUND2) N-Queen10()
#  N:        Total       Unique        hh:mm:ss
#  2:            0            0         0:00:00
#  3:            0            0         0:00:00
#  4:            2            1         0:00:00
#  5:           10            2         0:00:00
#  6:            4            1         0:00:00
#  7:           40            6         0:00:00
#  8:           92           12         0:00:01
#  9:          352           46         0:00:04
# 10:          724           92         0:00:09
# 11:         2680          341         0:00:38
# 12:        14200         1787         0:03:50
#
#
# ---------------------------------------------------------------------------------
##
# 11. BT + Bit + Symmetry cancellation Bit + Sort by queen position (BOUND1 + BOUND2) + Pruning
#
# 実行結果
#
# <>１１．BT＋Bit＋対称解除Bit＋クイーンの位置による振り分け(BOUND1+BOUND2)＋枝刈り N-Queen11()
#  N:        Total       Unique        hh:mm:ss
#  2:            0            0         0:00:00
#  3:            0            0         0:00:00
#  4:            2            1         0:00:00
#  5:           10            2         0:00:00
#  6:            4            1         0:00:00
#  7:           40            6         0:00:00
#  8:           92           12         0:00:01
#  9:          352           46         0:00:01
# 10:          724           92         0:00:04
# 11:         2680          341         0:00:22
# 12:        14200         1787         0:02:00
#
# ---------------------------------------------------------------------------------
#
# 12. BT + Bit + Symmetry cancellation Bit + Sorting according to queen position (BOUND1 + BOUND2) + Pruning + Optimization
 
#
# 実行結果
# <>１２．BT＋Bit＋対称解除Bit＋クイーンの位置による振り分け(BOUND1+BOUND2)＋枝刈り＋最適化 N-Queen12()
#  N:        Total       Unique        hh:mm:ss
#  2:            0            0         0:00:00
#  3:            0            0         0:00:00
#  4:            2            1         0:00:00
#  5:           10            2         0:00:00
#  6:            4            1         0:00:00
#  7:           40            6         0:00:00
#  8:           92           12         0:00:00
#  9:          352           46         0:00:00
# 10:          724           92         0:00:01
# 11:         2680          341         0:00:05
# 12:        14200         1787         0:00:25
#

