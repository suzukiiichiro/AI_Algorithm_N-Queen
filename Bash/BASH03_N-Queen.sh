#!/bin/bash
#
#
# Bash（シェルスクリプト）で学ぶ「アルゴリズムとデータ構造」
# 一般社団法人  共同通信社  情報技術局  鈴木  維一郎(suzuki.iichiro@kyodonews.jp)
#
# ---------------------------------------------------------------------------------
##
# ３．バックトラック
#
# 　各列、対角線上にクイーンがあるかどうかのフラグを用意し、途中で制約を満た
# さない事が明らかな場合は、それ以降のパターン生成を行わない。
# 　各列、対角線上にクイーンがあるかどうかのフラグを用意することで高速化を図る。
# 　これまでは行方向と列方向に重複しない組み合わせを列挙するものですが、王妃
# は斜め方向のコマをとることができるので、どの斜めライン上にも王妃をひとつだ
# けしか配置できない制限を加える事により、深さ優先探索で全ての葉を訪問せず木
# を降りても解がないと判明した時点で木を引き返すということができます。
#
#
#  N-Queen の データ配列について
#  =============================
#
#  総当たり
#  結局全部のケースをやってみる（完全解）
#
#  バックトラック
#  とりあえずやってみる。ダメなら戻って別の道を探る
#
#
#  N-Queen: クイーンの効き筋
#  =========================
#  クイーンの位置から、縦、横、斜めが効き筋となります。
#  　　　 ___________________
#        |-*-|---|---|-*-|---|
#        +-------------------+
#        |---|-*-|---|-*-|---|
#        +-------------------+
#        |---|---|-*-|-*-|-*-|
#        +-------------------+
#        |-*-|-*-|-*-|-Q-|-*-|
#        +-------------------+
#        |---|---|-*-|-*-|-*-|
#        +-------------------+
#
#
#  N-Queen: 盤面上で互いのクイーンが効き筋にならないように配置
#  ===========================================================
#
#        完成図：
#  　　　 ___________________
#        |-Q-|---|---|---|---|
#        +-------------------+
#        |---|---|---|-Q-|---|
#        +-------------------+
#        |---|-Q-|---|---|---|
#        +-------------------+
#        |---|---|---|---|-Q-|
#        +-------------------+
#        |---|---|-Q-|---|---|
#        +-------------------+
#
#
#  盤面をデータ構造で表す
#  ======================
#
#     aBoard[] = { 0, 3, 1, 4, 2 };
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________
#    0   |-Q-|---|---|---|---| [0]
#        +-------------------+
#    1   |---|---|---|-Q-|---| [3]
#        +-------------------+
#    2   |---|-Q-|---|---|---| [1]
#        +-------------------+
#    3   |---|---|---|---|-Q-| [4]
#        +-------------------+
#    4   |---|---|-Q-|---|---| [2]
#        +-------------------+
#
#
#  効き筋の表現
#  ============
#
#  　すでに効き筋：FALSE(盤面ではF）
#  　配置可能    ：TRUE
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________
#    0   |---|-F-|---|-F-|---|
#        +-------------------+
#    1   |-F-|-F-|-F-|---|---|
#        +-------------------+ down[row],left[col-row+(N-1)],right[col+row]
#    2   |-F-|-Q-|-F-|-F-|-F-| down[2],  left[1  -2  +(4-1)],right[1  +2  ]
#        +-------------------+
#    3   |-F-|-F-|-F-|---|---|
#        +-------------------+
#    4   |---|-F-|---|-F-|---|
#        +-------------------+
#
#
#  効き筋を三つの配列で表現
#  ========================
#
#  ■ 基本：aBoard[row]=col
#   クイーンの位置
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________
#    0   |---|---|---|---|---|
#        +-------------------+
#    1   |---|---|---|---|---|
#        +-------------------+
#    2   |---|-Q-|---|---|---| aBoard[row]=col
#        +-------------------+
#    3   |---|---|---|---|---|
#        +-------------------+
#    4   |---|---|---|---|---|
#        +-------------------+
#
#
#  ■配列1：down[row]
#
#  そのrow(行)にQueenがいる場合はFALSE
#                      いない場合はTRUE
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)                    効き筋は down[2]
#         ___________________
#    0   |---|---|---|---|---|
#        +-------------------+
#    1   |---|---|---|---|---|
#        +-------------------+ down[2]
#    2   |-F-|-Q-|-F-|-F-|-F-| down[2]==F
#        +-------------------+ rowが2だったらF
#    3   |---|---|---|---|---|
#        +-------------------+
#    4   |---|---|---|---|---|
#        +-------------------+
#                             
#
#  ■配列２：left[col-row+N-1]
#                    left[col-row+N-1]==F
#                        Qの場所：col(1)-row(2)+(4-1)=2なので
#                        col-row+N-1が２のところがＦとなる 
#  　　       column(列)
#          0   1   2   3   4
#  row(行)                    効き筋は left[col-row+(N-1)]
#         __________________           left[1  -2  +(4-1)]==2
#    0   |---|---|---|---|---|
#        +-------------------+
#    1   |-F-|---|---|---|---| col:0-row:1+N-1:3=2で2なのでＦ
#        +-------------------+
#    2   |---|-Q-|---|---|---|
#        +-------------------+
#    3   |---|---|-F-|---|---| col:2-row:3+N-1:3=2で2なのでＦ
#        +-------------------+
#    4   |---|---|---|-F-|---| col:3-row:4+N-1:3=2で2なのでＦ
#        +-------------------+
#                      left[col-row+N-1]==F
#
#
#  ■配列3：right[col+row]
#
#                      right[col+row]==F 
#                          Qの場所：col(1)+row(2)=3なので
#                          col+rowが3になるところがFとなる。
#  　　       column(列)
#          0   1   2   3   4
#  row(行)                    効き筋は right[col + row]
#         ___________________          right[1   + 2  ]==3
#    0   |---|---|---|-F-|---| col:3+row:0で3なのでF
#        +-------------------+
#    1   |---|---|-F-|---|---| col:2+row:1で3なのでF
#        +-------------------+
#    2   |---|-Q-|---|---|---| 
#        +-------------------+
#    3   |-F-|---|---|---|---| col:0+row:3で3なのでF
#        +-------------------+
#    4   |---|---|---|---|---|
#        +-------------------+
#
#
#  考え方：１
#  ==========
#  row=0, col=0 にクイーンを配置してみます。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________  
#    0   |-Q-|---|---|---|---| 
#        +-------------------+
#    1   |---|---|---|---|---|
#        +-------------------+
#    2   |---|---|---|---|---| 
#        +-------------------+
#    3   |---|---|---|---|---|
#        +-------------------+
#    4   |---|---|---|---|---|
#        +-------------------+
#
#
#  考え方：２
#  ==========
#  効き筋を埋めます
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]★
#        +-------------------+
#    1   |---|-F-|---|---|---|
#        +-------------------+
#    2   |---|---|-F-|---|---| 
#        +-------------------+
#    3   |---|---|---|-F-|---|
#        +-------------------+
#    4   |---|---|---|---|-F-|
#        +-------------------+ right[col-row+(N-1)]★
#
#
#  考え方：３
#  ==========
#  次の候補は以下のＡ，Ｂ，Ｃとなります
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=;
#  aBoard[2]=;
#  aBoard[3]=;
#  aBoard[4]=;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    1   |---|-F-|---|---|---|
#        +-------------------+
#    2   |---|-A-|-F-|---|---| 
#        +-------------------+
#    3   |---|-B-|---|-F-|---|
#        +-------------------+
#    4   |---|-C-|---|---|-F-|
#        +-------------------+ right[col-row+(N-1)]
#
#  考え方：４
#  ==========
#  Ａにおいてみます。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    1   |---|-F-|---|---|---|
#        +-------------------+
#    2   |---|-Q-|-F-|---|---|  
#        +-------------------+
#    3   |---|---|---|-F-|---|
#        +-------------------+
#    4   |---|---|---|---|-F-|
#        +-------------------+ right[col-row+(N-1)]
#
#  考え方：５
#  ==========
#  効き筋は以下の通りです。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                      left[col+row]
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    1   |-F-|-F-|-F-|---|---|
#        +-------------------+
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row]★
#        +-------------------+
#    3   |-F-|---|-F-|-F-|---|
#        +-------------------+
#    4   |---|---|---|-F-|-F-|
#        +-------------------+ right[col-row+(N-1)]
#                      right[col-row+(N-1)]★
#
#  考え方：６
#  ==========
#  次の候補はＡとなります
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=2;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                     left[col+row]
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    1   |-F-|-F-|-F-|---|---|
#        +-------------------+
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row] 
#        +-------------------+
#    3   |-F-|---|-F-|-F-|---|
#        +-------------------+ 
#    4   |---|---|-A-|-F-|-F-| 
#        +-------------------+ right[col-row+(N-1)]
#                      right[col-row+(N-1)]
#  考え方：７
#  ==========
#  効き筋は以下の通りです。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=2;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                    left[col+row]
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    1   |-F-|-F-|-F-|---|---|
#        +-------------------+ left[col+row]★
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    3   |-F-|---|-F-|-F-|---|
#        +-------------------+ 
#    4   |---|---|-Q-|-F-|-F-| down[row]★
#        +-------------------+ right[col-row+(N-1)]
#                      right[col-row+(N-1)]
#
#
#  考え方：８
#  ==========
#  次の候補はＡとなります
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=3;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=2;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                     left[col+row]
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row] 
#        +-------------------+
#    1   |-F-|-F-|-F-|-A-|---|
#        +-------------------+ left[col+row]
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
#        +-------------------+
#    3   |-F-|---|-F-|-F-|---|
#        +-------------------+ 
#    4   |---|---|-Q-|-F-|-F-| down[row]
#        +-------------------+ right[col-row+(N-1)]
#                      right[col-row+(N-1)]
#
#  考え方：９
#  ==========
#  効き筋は以下の通りです。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=3;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=2;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                     left[col+row]
#         ___________________left[col+row]★
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row] 
#        +-------------------+
#    1   |-F-|-F-|-F-|-Q-|-F-| down[row]★
#        +-------------------+ left[col+row]
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
#        +-------------------+ right[col-row+(N-1)]★
#    3   |-F-|---|-F-|-F-|---|
#        +-------------------+ 
#    4   |---|---|-Q-|-F-|-F-| down[row]
#        +-------------------+ right[col-row+(N-1)]
#                      right[col-row+(N-1)]
#
#  考え方：１０
#  ==========
#  今回は、うまくいっていますが、
#  次の候補がなければ、キャンセルして、
#  前のコマを次の候補にコマを移動し、
#  処理を継続します。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=3;
#  aBoard[2]=1;
#  aBoard[3]=;
#  aBoard[4]=2;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                     left[col+row]
#         ___________________left[col+row]★
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row] 
#        +-------------------+
#    1   |-F-|-F-|-F-|-Q-|-F-| down[row]★
#        +-------------------+ left[col+row]
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
#        +-------------------+ right[col-row+(N-1)]★
#    3   |-F-|---|-F-|-F-|---|
#        +-------------------+ 
#    4   |---|---|-Q-|-F-|-F-| down[row]
#        +-------------------+ right[col-row+(N-1)]
#                      right[col-row+(N-1)]
#
#
#  考え方：１１
#  ==========
#  最後のクイーンをおきます
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=3;
#  aBoard[2]=1;
#  aBoard[3]=4;
#  aBoard[4]=2;
#
#  　　       column(列)
#          0   1   2   3   4
#  row(行)
#                      left[col+row]
#                          left[col+row]
#         ___________________  
#    0   |-Q-|-F-|-F-|-F-|-F-| down[row]  
#        +-------------------+
#    1   |-F-|-F-|-F-|-Q-|-F-| down[row]
#        +-------------------+ left[col+row]
#    2   |-F-|-Q-|-F-|-F-|-F-| down[row]
#        +-------------------+ right[col-row+(N-1)]
#    3   |-F-|---|-F-|-F-|-Q-| down[row]★
#        +-------------------+ 
#    4   |---|---|-Q-|-F-|-F-| down[row]
#        +-------------------+
#                          right[col-row+(N-1)]
#                       right[col-row+(N-1)]
#
#
#  考え方：１２
#  ==========
#  rowの脇にcolの位置を示します。
#
#  aBoard[row]=col
#     ↓
#  aBoard[0]=0;
#  aBoard[1]=3;
#  aBoard[2]=1;
#  aBoard[3]=4;
#  aBoard[4]=2;
#
#  　　       column(列)
#           0   1   2   3   4
#  row(行)
#          ___________________  
#    0[0] |-Q-|-F-|-F-|-F-|-F-|  
#         +-------------------+
#    1[3] |-F-|-F-|-F-|-Q-|-F-|
#         +-------------------+
#    2[1] |-F-|-Q-|-F-|-F-|-F-| 
#         +-------------------+
#    3[4] |-F-|---|-F-|-F-|-Q-|
#         +-------------------+ 配列構造で 
#    4[2] |---|---|-Q-|-F-|-F-|  aBoard[]={0,3,1,4,2} 
#         +-------------------+
#
#
# ---------------------------------------------------------------------------------
#
# 実行結果
#
# N:        Total       Unique        hh:mm:ss
# 2:            0            0         0:00:00
# 3:            0            0         0:00:00
# 4:            2            0         0:00:00
# 5:           10            0         0:00:00
# 6:            4            0         0:00:00
# 7:           40            0         0:00:00
# 8:           92            0         0:00:01
# 9:          352            0         0:00:03
#10:          724            0         0:00:17
#11:         2680            0         0:01:23
#12:        14200            0         0:07:30
#
##
#
# グローバル変数は大文字
TOTAL=0;
UNIQUE=0;
typeset -a flag_a="";     # -a は配列の型を宣言します
typeset -a flag_b="";
typeset -a flag_c="";
N-Queen3_rec(){
  # ローカル変数は明示的に local をつけ、代入する場合は ""ダブルクォートが必要です。
  # -i は 変数の型が整数であることを示しています
  local -i min="$1";      # ひとつ目のパラメータ $1をminに代入
  local -i size=$2;       # ふたつ目のパラメータ $2をsizeに代入
  local -i i=0;           # 再帰するために forで使う変数も宣言が必要
  # forはこういうＣ的な書き方のほうが見やすい
  for((i=0;i<size;i++)){        # (()) の中の変数に $ は不要です 
    #わかりづらいですが、この文はif文 文字列比較の場合は [ ] を使います
    # 長い文章は \ （スペースバックスラッシュ）で改行することができます
    [ "${flag_a[$i]}" != "true"  ]&& \
    [ "${flag_b[$min+$i]}" != "true" ]&& \
    [ "${flag_c[$min-$i+$size-1]}" != "true" ]&&{ #この文はif文 文字列比較の場合は [ ] を使います
      pos[$min]=$i ;            # 代入する場合、posの前には$ は不要ですが、添え字には$が必要
      ((min==(size-1)))&&{      # (()) の中の変数に $ は不要です
        ((TOTAL++));            # ((TOTAL++))はTOTALのインクリメント (()) の中の変数に $ は不要です
      }||{                      # elseのはじまり                     
        flag_a[$i]="true" ;     # 配列の中の添え字には $ をつけます 
        flag_b[$min+$i]="true" ; 
        flag_c[$min-$i+$size-1]="true" ; 
        N-Queen3_rec "$((min+1))" "$size" ; # 再帰する場合は $((min++))ではなく $((min+1))
        flag_a[$i]="" ;           
        flag_b[$min+$i]="" ;   
        flag_c[$min-$i+$size-1]="" ; 
      }          
    }
  }  
}
#
N-Queen3(){
  local -i max=15;
  local -i min=2;
  local -i N="$min";
  local startTime=0;
	local endTime=0;
	local hh=mm=ss=0; 		# いっぺんにに初期化することもできます
  echo " N:        Total       Unique        hh:mm:ss" ;
  for((N=min;N<=max;N++)){
    TOTAL=0;      # Nが更新される度に TOTALとUNIQUEを初期化
    UNIQUE=0;
    startTime=`date +%s` ;      # 計測開始時間
    N-Queen3_rec 0 "$N";
		endTime=`date +%s`;					# 計測終了時間
		ss=`expr ${endTime} - ${startTime}` # hh:mm:ss 形式に変換
		hh=`expr ${ss} / 3600`
		ss=`expr ${ss} % 3600`
		mm=`expr ${ss} / 60`
		ss=`expr ${ss} % 60`
    printf "%2d:%13d%13d%10d:%.2d:%.2d\n" $N $TOTAL $UNIQUE $hh $mm $ss ;
  } 
}
#
# 実行はコメントアウトを外して、 $ ./BASH_N-Queen.sh 
#
  echo "<>３．バックトラック(BT) Queen3()";
  N-Queen3;
#
#
